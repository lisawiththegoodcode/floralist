@model FinalProject.Models.Proposal
@inject FinalProject.Services.IRepository repository

@{
    var customerItems = repository.Customers.Select(x => new SelectListItem(x.Name, x.Id.ToString()));

    ViewData["Title"] = "Proposals";
}

<h3>Create Proposal</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Customer" class="control-label"></label>
                <select asp-for="CustomerId" asp-items="@customerItems" class="form-control"></select>
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" id="salmon-btn-sm" />
            </div>
        </form>
    </div>
</div>

<div>
    <hr />
    <a class="btn btn-link" asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
