@model FinalProject.Models.Proposal
@inject FinalProject.Services.IRepository repository

@{
    //I could use a view model here instead of injecting these lists
    var customerItems = repository.Customers.Select(x => new SelectListItem(x.Name, x.Id.ToString()));
    var designerItems = repository.Designers.Select(x => new SelectListItem(x.Name, x.Id.ToString()));

    ViewData["Title"] = "Proposals";
}

<h4>Proposal</h4>
<hr />

<div class="container">
    @if (Model.IsShared)
    {
        <h4>This proposal has been previously sent to @Model.Customer.Email. Would you like to email again?</h4>
    }
    else
    {
        <h4>Are you sure you want to send this proposal to @Model.Customer.Email?</h4>
    }
    <form asp-action="Share">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="@(Model.IsShared? "Send Again" : "Send Email")" class="btn btn-default" />
    </form>
    <hr />


    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-4 text-center">@Model.Title</h1>
            <p class="lead text-center">@Model.Description</p>
        </div>
    </div>
    @*<div class="container">*@
    <div class="row">
        @foreach (var item in Model.ProposalItems)
        {
            <div class="col-sm-3">
                <div class="card">
                    <img id="img-sq" src="/Images/Raw/@item.Image.Id" alt="@item.Caption" />
                    @*<img src="~/images/@Model.ProposalItems[i].Image.FileName" width=200 height=200 style="object-fit:cover" />*@
                    <div class="card-body">
                        <p class="card-text">@item.Caption</p>
                    </div>
                </div>
            </div>
        }
    </div>
    @*</div>*@
</div>

<a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
<a asp-action="Index">Back to List</a>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
